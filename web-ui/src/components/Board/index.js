import React, { Component } from "react";
import { connect } from "react-redux";
import Space from "./Space";
import SpaceDetailed from "components/SpaceDetailed";
import { range, getPlayerName } from "utils";
import MiddleBoard from "./MiddleBoard";
import { togglePropertyModal } from "redux/actions";
import "./style.css";

class Board extends Component {
  //adhoc thing do not rely on this for a long term solution
  //ideally this should be generated by the server

  getPlayersOnPosition = index => {
    const { playersPositions, myId } = this.props;
    const presence = {};

    for (let playerId in playersPositions) {
      if (index === playersPositions[playerId]) {
        presence[getPlayerName(playerId, myId)] = true;
      }
    }
    return presence;
  };

  getOwned = space => {
    const { players, myId } = this.props;
    if (space.owned && players.indexOf(space.ownerId) !== -1) {
      return { owned: true, owner: getPlayerName(space.ownerId, myId) };
    }
    return { owned: false, owner: "" };
  };

  getSpaceProps = index => {
    const {
      properties,
      playerAction,
      bsmCandidates,
      togglePropertyModal
    } = this.props;
    let highlighted = false;
    const space = properties[index];
    const key = index;
    const owned = this.getOwned(space);
    const playersOnPosition = this.getPlayersOnPosition(index);

    if (playerAction) {
      const {
        buyingCandidates,
        sellingCandidates,
        mortgageCandidates
      } = bsmCandidates;

      if (playerAction === "buy-constructions") {
        highlighted = buyingCandidates.indexOf(index) !== -1;
      }
      if (playerAction === "sell-constructions") {
        highlighted = sellingCandidates.indexOf(index) !== -1;
      }
      if (playerAction === "mortage-unmortgage") {
        highlighted = mortgageCandidates.indexOf(index) !== -1;
      }
    }

    return {
      index,
      space,
      key,
      highlighted,
      playersOnPosition,
      owned,
      togglePropertyModal
    };
  };

  render() {
    const { getSpaceProps } = this;
    const { phase, myId, playersCash } = this.props;

    return (
      <div className="monopoly-table">
        {/* Start of Board */}
        <div className="board">
          <MiddleBoard phase={phase} myId={myId} playersCash={playersCash} />

          {/* Actual Grids go here */}
          <Space {...getSpaceProps(0)} />

          {/* Bottom Section */}
          <div className="board-row horizontal-board-row bottom-board-row">
            {range(9).map(index => (
              <Space {...getSpaceProps(10 - (index + 1))} />
            ))}
          </div>

          <Space {...getSpaceProps(10)} />

          {/* Left Section */}
          <div className="board-row vertical-board-row left-board-row">
            {range(9).map(index => (
              <Space {...getSpaceProps(20 - (index + 1))} />
            ))}
          </div>

          <Space {...getSpaceProps(20)} />

          {/* Top Section */}
          <div className="board-row horizontal-board-row top-board-row">
            {range(9).map((prop, index) => (
              <Space {...getSpaceProps(21 + index)} />
            ))}
          </div>

          <Space {...getSpaceProps(30)} />

          {/* Right Section */}
          <div className="board-row vertical-board-row right-board-row">
            {range(9).map((prop, index) => (
              <Space {...getSpaceProps(31 + index)} />
            ))}
          </div>
          {/* End of Game Playing Grids */}
        </div>
        <SpaceDetailed />
      </div>
    );
  }
}

const mapDispatchToProps = dispatch => {
  return {
    togglePropertyModal: (showPropertyModal, selectedPropertyIndex) =>
      dispatch(togglePropertyModal(showPropertyModal, selectedPropertyIndex))
  };
};

const mapStateToProps = state => {
  return {
    myId: state.myId,
    phase: state.phase,
    playersCash: state.playersCash,
    players: state.players || [],
    properties: state.properties,
    candidates: state.candidates || [],
    playersPositions: state.playersPositions,
    bsmCandidates: state.bsmCandidates,
    playerAction: state.playerAction
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Board);
